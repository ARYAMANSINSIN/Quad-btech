1.Palindrome Check:
rust

fn is_palindrome(s: &str) -> bool {
    let s = s.chars().collect::<Vec<char>>();
    let len = s.len();
    for i in 0..len / 2 {
        if s[i] != s[len - 1 - i] {
            return false;
        }
    }
    true
}

fn main() {
    let example = "racecar";
    if is_palindrome(example) {
        println!("{} is a palindrome!", example);
    } else {
        println!("{} is not a palindrome.", example);
    }
}



2.First Occurrence in Sorted Array:
rust

fn first_occurrence(arr: &[i32], target: i32) -> Option<usize> {
    arr.iter().position(|&x| x == target)
}

fn main() {
    let sorted_array = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];
    let target_number = 5;
    if let Some(index) = first_occurrence(&sorted_array, target_number) {
        println!("The first occurrence of {} is at index {}", target_number, index);
    } else {
        println!("The number {} is not found in the array.", target_number);
    }
}





3.Shortest Word in String:


fn shortest_word(s: &str) -> &str {
    s.split_whitespace().min_by_key(|&word| word.len()).unwrap_or("")
}

fn main() {
    let sentence = "This is a sample sentence";
    let shortest = shortest_word(sentence);
    println!("The shortest word is: {}", shortest);
}






4.Prime Check:
rust

fn is_prime(num: u32) -> bool {
    if num < 2 {
        return false;
    }
    for i in 2..=(num as f64).sqrt() as u32 {
        if num % i == 0 {
            return false;
        }
    }
    true
}

fn main() {
    let number = 17;
    if is_prime(number) {
        println!("{} is a prime number!", number);
    } else {
        println!("{} is not a prime number.", number);
    }
}







5.Median of Sorted Array:
rust

fn find_median(arr: &[i32]) -> f64 {
    let len = arr.len();
    if len % 2 == 0 {
        let mid1 = arr[len / 2 - 1] as f64;
        let mid2 = arr[len / 2] as f64;
        (mid1 + mid2) / 2.0
    } else {
        arr[len / 2] as f64
    }
}

fn main() {
    let sorted_array = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];
    let median = find_median(&sorted_array);
    println!("The median of the array is: {}", median);
}






6.Longest Common Prefix:
rust

fn longest_common_prefix(strings: &[&str]) -> String {
    if strings.is_empty() {
        return String::new();
    }
    let first_str = strings[0];
    let mut prefix = String::new();

    'outer: for (i, ch) in first_str.chars().enumerate() {
        for string in &strings[1..] {
            if i >= string.len() || ch != string.chars().nth(i).unwrap() {
                break 'outer;
            }
        }
        prefix.push(ch);
    }

    prefix
}

fn main() {
    let words = vec!["flower", "flow", "flight"];
    let common_prefix = longest_common_prefix(&words);
    println!("The longest common prefix is: {}", common_prefix);
}







7.Kth Smallest Element in Array:
rust

fn kth_smallest(arr: &[i32], k: usize) -> Option<i32> {
    if k > 0 && k <= arr.len() {
        let mut sorted_arr = arr.to_vec();
        sorted_arr.sort();
        Some(sorted_arr[k - 1])
    } else {
        None
    }
}

fn main() {
    let array = vec![4, 2, 7, 1, 9, 3];
    let k = 3;
    if let Some(kth_element) = kth_smallest(&array, k) {
        println!("The {}-th smallest element is: {}", k, kth_element);
    } else {
        println!("Invalid value of k.");
    }
}
8.Maximum Depth of Binary Tree:
rust

// Assuming a basic Binary Tree structure
#[derive(Debug)]
struct TreeNode {
    value: i32,
    left: Option<Box<TreeNode>>,
    right: Option<Box<TreeNode>>,
}

fn max_depth(root: &Option<Box<TreeNode>>) -> i32 {
    match root {
        Some(node) => 1 + std::cmp::max(max_depth(&node.left), max_depth(&node.right)),
        None => 0,
    }
}

fn main() {
    // Example Binary Tree
    let tree = Some(Box::new(TreeNode {
        value: 3,
        left: Some(Box::new(TreeNode {
            value: 9,
            left: None,
            right: None,
        })),
        right: Some(Box::new(TreeNode {
            value: 20,
            left: Some(Box::new(TreeNode {
                value: 15,
                left: None,
                right: None,
            })),
            right: Some(Box::new(TreeNode {
                value: 7,
                left: None,
                right: None,
            })),
        })),
    }));

    let depth = max_depth(&tree);
    println!("The maximum depth of the binary tree is: {}", depth);
}

9.Reverse a String:
rust

fn reverse_string(s: &str) -> String {
    s.chars().rev().collect()
}

fn main() {
    let original = "Rust";
    let reversed = reverse_string(original);
    println!("Original: {}\nReversed: {}", original, reversed);
}
Check if a Number is Prime in Rust:
rust

fn is_prime(num: u32) -> bool {
    if num < 2 {
        return false;
    }
    for i in 2..=(num as f64).sqrt() as u32 {
        if num % i == 0 {
            return false;
        }
    }
    true
}

fn main() {
    let number = 23;
    if is_prime(number) {
        println!("{} is a prime number!", number);
    } else {
        println!("{} is not a prime number.", number);
    }
}





10.Merge Two Sorted Arrays:
rust

fn merge_sorted_arrays(arr1: &[i32], arr2: &[i32]) -> Vec<i32> {
    let mut result = Vec::with_capacity(arr1.len() + arr2.len());
    let (mut i, mut j) = (0, 0);

    while i < arr1.len() && j < arr2.len() {
        if arr1[i] <= arr2[j] {
            result.push(arr1[i]);
            i += 1;
        } else {
            result.push(arr2[j]);
            j += 1;
        }
    }

    result.extend_from_slice(&arr1[i..]);
    result.extend_from_slice(&arr2[j..]);

    result
}

fn main() {
    let array1 = vec![1, 3, 5, 7];
    let array2 = vec![2, 4, 6, 8];
    let merged_array = merge_sorted_arrays(&array1, &array2);
    println!("Merged Array: {:?}", merged_array);
}